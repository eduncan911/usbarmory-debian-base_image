# This workflow will build everything, package, compress, sign, hash,
# and create a full GitHub release!
#
# It is triggered when you create a TAG only.
# Optionally, we can change this to trigger on every Master push.
#
# REQUIREMENTS:
# - create a GitHub Token
# - use that token to create a GitHub Secret in your repo named: GITHUB_TOKEN_FOR_RELEASES
# - ./.github/assets/release-template.json Template for Release Body
#

name: Release
# on:
#   push:
#     tags:
#       - '*'
on:
  release:
    types: [created]

jobs:
  get-env:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v1
    - run: |
            env
            pwd
            ls -la
    - uses: csexton/release-asset-action@6a964e8
      with:
        file: "./conf/*.conf"
        github-token: ${{ secrets.GITHUB_TOKEN_FOR_RELEASES }}

  # create-release:
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     fail-fast: true
  #   steps:
  #   - uses: actions/checkout@v1

  #   # TODO: Create this action
  #   # - name: Create Template for Release
  #   #   id: template-release
  #   #   uses: ./.github/actions/template
  #   #   with:
  #   #     input_file: ./.github/assets/release-template.json
  #   #     variables: |
  #   #       RELEASE_DATE=20190506
  #   #       RELEASE_NOTES= # TODO, github.ref == tag notes?
    
  #   # TODO: Modify for "body"
  #   - name: Create Release
  #     id: create_release
  #     uses: csexton/create-release:add-body
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_FOR_RELEASES }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       body: |
  #         Some dummy text for now.

  #         Eventually this will be a template.
  #       draft: true
  #       prerelease: false

  # mark-one:
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       arch: [imx53]
  #       boot: [uSD]
  #       device: [mark-one]
      
  #   needs: create-release

  #   steps:
  #   - uses: actions/checkout@v1

  #   - name: Prerequisites
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y \
  #         bc binfmt-support bzip2 fakeroot gcc gcc-arm-linux-gnueabihf git \
  #         gnupg make parted qemu-user-static wget xz-utils zip debootstrap \
  #         sudo dirmngr bison flex libssl-dev kmod

  #   - name: Import Signing Keys
  #     run: |  # public key servers time out on at least one test, therefore we fetch cached keys
  #       wget http://keys.inversepath.com/38DBBDC86092693E.asc && gpg --import 38DBBDC86092693E.asc
  #       wget http://keys.inversepath.com/87F9F635D31D7652.asc && gpg --import 87F9F635D31D7652.asc

  #   #- run:  make V=${{ matrix.device }} IMX=${{ matrix.arch }} BOOT=${{ matrix.boot }} release

  #   - name: Prepare Release Assets
  #     id: release-assets
  #     run: |
  #       mkdir -p release/
  #       rm ./usbarmory-*.raw
  #       mv ./usbarmory-* release/
  #       echo ::set-output name=assets::$(ls -1 ./release/)

  #   - uses: meeDamian/github-release@1.0
  #     with:
  #       token: ${{secrets.GITHUB_TOKEN_FOR_RELEASES}}
        





















    # TODO: Modify for "assets" array
    # - name: Upload Assets to Release
    #   id: upload-release-asset 
    #   uses: ./.github/actions/upload-release-asset@v1.0.0
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN_FOR_RELEASES }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     assets: '${{ steps.release-data.outputs.assets }}'


  # mark-two:
  #   runs-on: ubuntu-18.04
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       arch: [imx6ull]
  #       boot: [uSD, eMMC]
  #       device: [mark-two]

  #   needs: create-release
    
  #   steps:
  #   - uses: actions/checkout@v1

  #   - name: Prerequisites
  #     run: |
  #       sudo apt-get update
  #       sudo apt-get install -y \
  #         bc binfmt-support bzip2 fakeroot gcc gcc-arm-linux-gnueabihf git \
  #         gnupg make parted qemu-user-static wget xz-utils zip debootstrap \
  #         sudo dirmngr bison flex libssl-dev kmod

  #   - name: Import Signing Keys
  #     run: |  # public key servers time out on at least one test, therefore we fetch cached keys
  #       wget http://keys.inversepath.com/38DBBDC86092693E.asc && gpg --import 38DBBDC86092693E.asc
  #       wget http://keys.inversepath.com/87F9F635D31D7652.asc && gpg --import 87F9F635D31D7652.asc

  #   - run:  make V=${{ matrix.device }} IMX=${{ matrix.arch }} BOOT=${{ matrix.boot }} release
